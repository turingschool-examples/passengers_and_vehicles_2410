# lib/park.rb
class Park
  # Exposes name, admission_price, and vehicles as read-only attributes
  attr_reader :name, :admission_price, :vehicles

  # Constructor method to initialize a park with its name, admission price, and an empty array for vehicles
  def initialize(name, admission_price)
    @name = name                        # Stores the name of the park
    @admission_price = admission_price  # Stores the admission price (cost per adult)
    @vehicles = []                      # Initializes an empty array to track vehicles that enter the park
  end

  # Adds a vehicle to the list of vehicles in the park
  # This method receives a vehicle object and appends it to the @vehicles array
  def add_vehicle(vehicle)
    @vehicles << vehicle
  end

  # Gathers all passengers from all vehicles in the park
  # Uses flat_map to iterate over all vehicles and collect their passengers into one array
  def passengers
    @vehicles.flat_map(&:passengers)  # Combines the passengers from all vehicles
  end

  # Returns a list of names of all attendees (passengers) in the park
  # It maps over the passengers to return their names and then sorts them alphabetically
  def all_attendees
    passengers.map(&:name).sort  # Extracts names of passengers and sorts them alphabetically
  end

  # Returns a list of minors (sorted alphabetically)
  # Filters passengers who are under 18, maps over their names, and sorts them alphabetically
  def minors
    passengers.select { |passenger| !passenger.adult? }.map(&:name).sort
  end

  # Returns a list of adults (sorted alphabetically)
  # Filters passengers who are 18 or older, maps over their names, and sorts them alphabetically
  def adults
    passengers.select { |passenger| passenger.adult? }.map(&:name).sort
  end

  # Calculates the total revenue generated by the park
  # Revenue is based on the number of adult passengers multiplied by the admission price
  def revenue
    total_adults = passengers.count { |passenger| passenger.adult? }  # Counts the adult passengers
    total_adults * @admission_price  # Calculates revenue based on the number of adults
  end
end
